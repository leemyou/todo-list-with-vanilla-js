{
  "todos": [],
  "currentMode": {
    "modeInfo": [
      {
        "mode": "FETCH",
        "info": "javascript에서 통신 요청을 보내고 받을 수 있도록 하는 메서드입니다. \nXMLHttpRequest객체와 동일하게 HTTP 요청 기능을 하는 Client Side Web Api 이며, Promise 기반의 api를 제공합니다. 따라서 후속처리 메서드(than)으로 프로미스가 resolve 한 Respnose객체에 접근이 가능합니다. \n\nES6부터 웹 내장 라이브러리로 들어있어, 별도의 설치 없이도 사용 가능하다는 장점이 있습니다. \n\n하지만 구형 브라우저에서 호환이 되지 않을 가능성이 있으며, 기본적으로 쿠키를 보내지 못합니다. 응답값을 JSON으로 변환하는 과정이 필요하며, 404, 500과 같은 에러를 reject하지 못한다는 단점이 있습니다.",
        "code": "featch(url)\n  .than(res => {res.ok ? return res : throw new Error(`HTTP GET error! status: ${res.status}`)})\n  .catch(err => throw new Error(err))",
        "id": "c049"
      },
      {
        "mode": "AXIOS",
        "info": "Asynchronous Javascript And XML 라고 하며, JavaScript를 이용한 비동기성의 HTTP통신 기술을 말합니다. \n\n비동기라서 전체 페이지를 리로딩할 필요가 없고, 일부분만 갱신이 가능하다는 장점이 있습니다. 또한 모든 HTTP에러를 reject하는 프로미스를 반환합니다. 즉, 모든 에러를 catch에서 처리&관리하기 편하다는 장점이 있습니다. 인터셉터, 요청 설정 등 fetch보다 더 다양한 기능을 지원한다는 장점이 있습니다. \n\n사용을 위해서는 별도의 라이브러리의 설치가 필요하다는 것이 단점이며, 바닐라 JS에서 작업 시 jQuery가 없다면 가시성이 떨어지고 불편하다는 단점이 있습니다.",
        "code": "  //바닐라 JS \nvar reg = new XMLHttpRequest();\nreg.addEventListener('load', (e) =>console.log(e.currentTarget.response));\nreg.open('GET', url); \nreg.send(); \n\n  //react \nimport axios from 'axios'; \nconst { data } = await axios.get(basicUrl); \nreturn data;",
        "id": "8811"
      }
    ],
    "isFetchMode": true
  }
}